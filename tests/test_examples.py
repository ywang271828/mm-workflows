from pathlib import Path
from typing import List

import graphviz
import networkx as nx
import pytest
import yaml

import wic.cli
import wic.compiler
import wic.run_local
import wic.utils
from wic.wic_types import GraphData, GraphReps, NodeData, StepId, Yaml, YamlTree

from .test_setup import get_args, tools_cwl, yml_paths, validator, yml_paths_tuples


# NOTE: Most of the workflows in this list have free variables because they are subworkflows
# i.e. if you try to run them, you will get "Missing required input parameter"
run_blacklist: List[str] = [
    'assign_partial_charges_batch',
    'convert_ligand_mol2_to_pdbqt_mdanalysis',
    'download_smiles_ligand_db',
    'convert_ligand_mol2_to_pdbqt_obabel',
    'analysis_realtime_ligand',
    'analysis_realtime_complex',
    'analysis_realtime_protein',
    'ligand_modeling_docking',
    'align_protein_CA_pymol',
    'assign_partial_charges',
    'minimize_ligand_only',
    'analysis_final_steps',
    'autodock_vina_rescore',
    'analysis_final',
    'gen_topol_params',
    'analysis_realtime',
    'convert_pdbqt',
    'download_pdb',
    'setup_vac_min',
    'npt_gromacs',
    'setup_pdb',
    'docking_stability',
    'npt_amber',
    'analysis',
    'solv_ion',
    'topology',
    'stability',
    'docking',
    'l-bfgs',
    'basic',
    'equil',
    'setup',
    'steep',
    'modeling',  # called in tutorial
    'tutorial',  # called in nmr
    'prod',
    'flc',
    'dsb',
    'npt',
    'nvt',
    'min',
    'cg',
    'yank',
    'fix_protein',
    # These (currently) always return success, so no point in running them.
    'cwl_watcher_analysis',
    'cwl_watcher_complex',
    'cwl_watcher_ligand',
    'cwl_watcher_protein',
]


yml_paths_tuples_not_blacklist = [(s, p) for (s, p) in yml_paths_tuples if s not in run_blacklist]
# currently [vs_demo_2, vs_demo_3, vs_demo_4, elm, nmr,
#            multistep1, multistep2, multistep3]


def get_graph_reps(name: str) -> GraphReps:
    """Initialize graph representations

    Args:
        name (str): The name of the graph

    Returns:
        GraphReps: A tuple of graph representations
    """
    graph_gv = graphviz.Digraph(name=f'cluster_{name}')
    graph_gv.attr(newrank='True')
    graph_nx = nx.DiGraph()
    graphdata = GraphData(str(name))
    return GraphReps(graph_gv, graph_nx, graphdata)


@pytest.mark.slow
@pytest.mark.parametrize("yml_path_str, yml_path", yml_paths_tuples_not_blacklist)
def test_run_examples(yml_path_str: str, yml_path: Path, cwl_runner: str) -> None:
    """Runs all of the examples in the examples/ directory. Note that some of
    the yml files lack inputs and cannot be run independently, and are excluded.
    """
    if yml_path_str == 'vs_demo_4':
        return None  # Skip so we don't accidentally DOS pdbbind.org.cn

    args = get_args(str(yml_path))

    # First compile the workflow.
    # Load the high-level yaml workflow file.
    with open(yml_path, mode='r', encoding='utf-8') as y:
        root_yaml_tree: Yaml = yaml.safe_load(y.read())
    Path('autogenerated/').mkdir(parents=True, exist_ok=True)
    wic_tag = {'wic': root_yaml_tree.get('wic', {})}
    plugin_ns = wic_tag['wic'].get('namespace', 'global')
    step_id = StepId(yml_path_str, plugin_ns)
    y_t = YamlTree(step_id, root_yaml_tree)
    yaml_tree_raw = wic.ast.read_ast_from_disk(y_t, yml_paths, tools_cwl, validator)
    with open(f'autogenerated/{Path(yml_path).stem}_tree_raw.yml', mode='w', encoding='utf-8') as f:
        f.write(yaml.dump(yaml_tree_raw.yml))
    yaml_tree = wic.ast.merge_yml_trees(yaml_tree_raw, {}, tools_cwl)
    with open(f'autogenerated/{Path(yml_path).stem}_tree_merged.yml', mode='w', encoding='utf-8') as f:
        f.write(yaml.dump(yaml_tree.yml))

    graph = get_graph_reps(str(yml_path))
    compiler_info = wic.compiler.compile_workflow(yaml_tree, args, [], [graph], {}, {}, {}, {},
                                                  tools_cwl, True, relative_run_path=True, testing=True)
    rose_tree = compiler_info.rose
    sub_node_data: NodeData = rose_tree.data
    yaml_stem = sub_node_data.name

    wic.utils.write_to_disk(rose_tree, Path('autogenerated/'), relative_run_path=True)

    # NOTE: Do not use --cachedir; we want to actually test everything.
    retval = wic.run_local.run_local(args, rose_tree, None, cwl_runner, True)
    assert retval == 0
    return
